// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OFMC_Booking_Platform.Entities;

#nullable disable

namespace OFMC_Booking_Platform.Migrations
{
    [DbContext(typeof(HealthcareDbContext))]
    [Migration("20250409045525_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OFMC_Booking_Platform.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppointmentPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactMethod")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Appointment");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            AppointmentDate = new DateTime(2022, 12, 31, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentEmail = "sierraerb25@gmail.com",
                            AppointmentPhone = "+15483335882",
                            ContactMethod = 0,
                            DoctorId = 1,
                            Notes = "Headache",
                            PatientId = 1,
                            PatientName = "Sara Hanks"
                        });
                });

            modelBuilder.Entity("OFMC_Booking_Platform.Entities.Availability", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotId"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SlotDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("SlotId");

                    b.ToTable("Availability");

                    b.HasData(
                        new
                        {
                            SlotId = 1,
                            DoctorId = 1,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2022, 12, 31, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 2,
                            DoctorId = 1,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2023, 12, 31, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 3,
                            DoctorId = 1,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2024, 12, 31, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 4,
                            DoctorId = 2,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2022, 12, 31, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 5,
                            DoctorId = 2,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2023, 12, 31, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 6,
                            DoctorId = 2,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2024, 12, 31, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 7,
                            DoctorId = 3,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2022, 12, 31, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 8,
                            DoctorId = 3,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2023, 12, 31, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 9,
                            DoctorId = 3,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2024, 12, 31, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("OFMC_Booking_Platform.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<int?>("DoctorExt")
                        .HasColumnType("int");

                    b.Property<string>("DoctorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorSpecialty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            DoctorExt = 106,
                            DoctorName = "Dr. Emily Carter",
                            DoctorSpecialty = "Family Physician"
                        },
                        new
                        {
                            DoctorId = 2,
                            DoctorExt = 103,
                            DoctorName = "Dr. Shawn Kieze",
                            DoctorSpecialty = "Pediatrics"
                        },
                        new
                        {
                            DoctorId = 3,
                            DoctorExt = 102,
                            DoctorName = "Dr. Sophia Lee",
                            DoctorSpecialty = "Women's Health & OB-GYN"
                        },
                        new
                        {
                            DoctorId = 4,
                            DoctorExt = 104,
                            DoctorName = "Dr. James Thompson",
                            DoctorSpecialty = "Internal Medicine"
                        },
                        new
                        {
                            DoctorId = 5,
                            DoctorExt = 105,
                            DoctorName = "Dr. Olivia Martinez",
                            DoctorSpecialty = "Dermatology"
                        },
                        new
                        {
                            DoctorId = 6,
                            DoctorExt = 101,
                            DoctorName = "Dr. Ryan Patel",
                            DoctorSpecialty = "Family Physician"
                        });
                });

            modelBuilder.Entity("OFMC_Booking_Platform.Entities.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            DOB = new DateTime(2022, 12, 31, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Sierra",
                            LastName = "Erb",
                            Password = "password",
                            PatientEmail = "sierraerb25@gmail.com"
                        });
                });

            modelBuilder.Entity("OFMC_Booking_Platform.Entities.Appointment", b =>
                {
                    b.HasOne("OFMC_Booking_Platform.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });
#pragma warning restore 612, 618
        }
    }
}
