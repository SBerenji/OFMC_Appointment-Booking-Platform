// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OFMC_Booking_Platform.Entities;

#nullable disable

namespace OFMC_Booking_Platform.Migrations
{
    [DbContext(typeof(HealthcareDbContext))]
    [Migration("20250416161124_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OFMC_Booking_Platform.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppointmentPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContactMethod")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("OFMC_Booking_Platform.Entities.Availability", b =>
                {
                    b.Property<int>("SlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlotId"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("SlotDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("SlotId");

                    b.ToTable("Availability");

                    b.HasData(
                        new
                        {
                            SlotId = 1,
                            DoctorId = 1,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 10, 28, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 2,
                            DoctorId = 1,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 11, 15, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 3,
                            DoctorId = 1,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 12, 12, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 4,
                            DoctorId = 2,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 10, 5, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 5,
                            DoctorId = 2,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 11, 11, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 6,
                            DoctorId = 2,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 12, 16, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 7,
                            DoctorId = 3,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 10, 20, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 8,
                            DoctorId = 3,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 11, 28, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 9,
                            DoctorId = 3,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 12, 22, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 10,
                            DoctorId = 4,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 10, 20, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 11,
                            DoctorId = 4,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 11, 15, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 12,
                            DoctorId = 4,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 12, 19, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 13,
                            DoctorId = 5,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 10, 2, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 14,
                            DoctorId = 5,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 11, 15, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 15,
                            DoctorId = 5,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 12, 14, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 16,
                            DoctorId = 6,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 10, 17, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 17,
                            DoctorId = 6,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 11, 25, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 18,
                            DoctorId = 6,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 12, 20, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 19,
                            DoctorId = 1,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 1, 28, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 20,
                            DoctorId = 1,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 8, 15, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 21,
                            DoctorId = 1,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 9, 12, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 22,
                            DoctorId = 1,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 8, 1, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 23,
                            DoctorId = 1,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 8, 12, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 24,
                            DoctorId = 1,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 8, 13, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 25,
                            DoctorId = 1,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 8, 24, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 26,
                            DoctorId = 1,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 8, 15, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SlotId = 27,
                            DoctorId = 1,
                            IsBooked = false,
                            SlotDateTime = new DateTime(2025, 8, 16, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("OFMC_Booking_Platform.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<int?>("DoctorExt")
                        .HasColumnType("int");

                    b.Property<string>("DoctorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DoctorSpecialty")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            DoctorExt = 106,
                            DoctorName = "Dr. Emily Carter",
                            DoctorSpecialty = "Family Physician"
                        },
                        new
                        {
                            DoctorId = 2,
                            DoctorExt = 103,
                            DoctorName = "Dr. Shawn Kieze",
                            DoctorSpecialty = "Pediatrics"
                        },
                        new
                        {
                            DoctorId = 3,
                            DoctorExt = 102,
                            DoctorName = "Dr. Sophia Lee",
                            DoctorSpecialty = "Women's Health & OB-GYN"
                        },
                        new
                        {
                            DoctorId = 4,
                            DoctorExt = 104,
                            DoctorName = "Dr. James Thompson",
                            DoctorSpecialty = "Internal Medicine"
                        },
                        new
                        {
                            DoctorId = 5,
                            DoctorExt = 105,
                            DoctorName = "Dr. Olivia Martinez",
                            DoctorSpecialty = "Dermatology"
                        },
                        new
                        {
                            DoctorId = 6,
                            DoctorExt = 101,
                            DoctorName = "Dr. Ryan Patel",
                            DoctorSpecialty = "Family Physician"
                        });
                });

            modelBuilder.Entity("OFMC_Booking_Platform.Entities.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("OFMC_Booking_Platform.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OFMC_Booking_Platform.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OFMC_Booking_Platform.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OFMC_Booking_Platform.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OFMC_Booking_Platform.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OFMC_Booking_Platform.Entities.Appointment", b =>
                {
                    b.HasOne("OFMC_Booking_Platform.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OFMC_Booking_Platform.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("OFMC_Booking_Platform.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
